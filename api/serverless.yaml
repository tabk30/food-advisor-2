service: food-advisor

plugins:
 - serverless-plugin-typescript
 - serverless-plugin-optimize
 - serverless-dynamodb-local
 - serverless-offline-dynamodb-streams
 - serverless-step-functions
 - '@fernthedev/serverless-offline-step-functions'
 - serverless-offline-sqs
 - serverless-offline-sns
 - serverless-offline

provider:
 name: aws
 runtime: nodejs16.x
 region: 'ap-southeast-1'
 environment:
  region: 'ap-southeast-1'
  dynamodb_end_point: 'http://localhost:8000'
  COMMAND_ACCOUNT_TABLE: 'command_account'
  QUERY_ACCOUNT_TABLE: 'query_account'
  QUERY_REVIEW_TABLE: 'query_review'
  QUERY_RESTAURANT_TABLE: 'query_restaurant'
  REVIEW_QUENE: 'reviewQuene'
  sns_end_point: 'http://127.0.0.1:4002'
  sqs_end_point: 'http://localhost:9324'
  GLOBAL_TOPIC_SNS: global_topic_sns
  GLOBAL_TOPIC_ARN: 'arn:aws:sns:ap-southeast-1:123456789012:global_topic_sns'
  ACCOUNT_TOPIC_SNS: account_topic_sns
  ACCOUNT_TOPIC_ARN: 'arn:aws:sns:ap-southeast-1:123456789012:account_topic_sns'
  RESTAURANT_TOPIC_SNS: restaurant_topic_sns
  RESTAURANT_TOPIC_ARN: 'arn:aws:sns:ap-southeast-1:123456789012:restaurant_topic_sns'
  REVIEW_TOPIC_SNS: review_topic_sns
  REVIEW_TOPIC_ARN: 'arn:aws:sns:ap-southeast-1:123456789012:review_topic_sns'
  

custom:
  dynamodb:
    stages:
    # set for create tables on dev enviroment
      - dev
    start:
      inMemory: true
      port: 8000
      migrate: true # create tables on start
      onStart: true
  serverless-offline-dynamodb-streams: 
    endpoint: http://localhost:8000
  '@fernthedev/serverless-offline-step-functions':
    port: 8014
    enabled: true
    debug: true
  # setup sqs 
  serverless-offline-sqs:
    endpoint: http://localhost:9324
    accessKeyId: local
    secretAccessKey: local
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: true
    subscriptions:
      - topic: 
          topicName: ${self:provider.environment.GLOBAL_TOPIC_SNS}
          rawMessageDelivery: 'true'
          autoSubscribe: 'false'
        queue: http://localhost:9324/queue/account_queue
      - topic: 
          topicName: ${self:provider.environment.GLOBAL_TOPIC_SNS}
          rawMessageDelivery: 'true'
          autoSubscribe: 'false'
        queue: http://localhost:9324/queue/review_queue
      - topic: 
          topicName: ${self:provider.environment.ACCOUNT_TOPIC_SNS}
          rawMessageDelivery: 'true'
          autoSubscribe: 'false'
        queue: http://localhost:9324/queue/account_queue
      - topic: 
          topicName: ${self:provider.environment.RESTAURANT_TOPIC_SNS}
          rawMessageDelivery: 'true'
          autoSubscribe: 'false'
        queue: http://localhost:9324/queue/restaurant_queue
      - topic: 
          topicName: ${self:provider.environment.REVIEW_TOPIC_SNS}
          rawMessageDelivery: 'true'
          autoSubscribe: 'false'
        queue: http://localhost:9324/queue/review_queue

resources: # CloudFormation template syntax
  Resources:
    commandAccountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: command_account
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: version
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: version
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamEnabled: true
          StreamViewType: NEW_AND_OLD_IMAGES
    queryAccountTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: query_account
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    queryReviewTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: query_review
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sort
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sort
            KeyType:  RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    queryRestaurantTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: query_restaurant
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GlobalSNS:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Global Topic SNS
        TopicName: global_topic_sns
    AccountSNS:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Account Topic SNS
        TopicName: account_topic_sns
    RestaurantSNS:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Restaurant Topic SNS
        TopicName: restaurant_topic_sns
    ReviewSNS:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Review Topic SNS
        TopicName: review_topic_sns
    AccountQueue: 
      Type: AWS::SQS::Queue
      Properties:
        QueueName: account_queue
    ReviewQueue: 
      Type: AWS::SQS::Queue
      Properties:
        QueueName: review_queue
    RestaurantQueue: 
      Type: AWS::SQS::Queue
      Properties:
        QueueName: restaurant_queue
# create lambda function
functions:
  account_api: 
   handler: ./src/account/lambda.handler
   events:
     - http:
          method: ANY
          path: '/account/{proxy+}'
     - stream:
          type: dynamodb
          tableName: command_account
          batchSize: 100
          maximumRetryAttempts: 10
          startingPosition: LATEST
          arn: 
            Fn::GetAtt:
              - command_account
              - Arn
     - sqs:
        queueName: account_queue
        arn:
          Fn::GetAtt:
            - AccountQueue
  review_api: 
   handler: ./src/review/lambda.handler
   events:
     - http:
        method: ANY
        path: '/review/{proxy+}'
     - sqs:
        queueName: review_queue
        arn:
          Fn::GetAtt:
            - ReviewQueue
  restaurant_api: 
   handler: ./src/restaurant/lambda.handler
   events:
     - http:
          method: ANY
          path: '/restaurant/{proxy+}'
     - sqs:
          queueName: restaurant_queue
          arn:
            Fn::GetAtt:
              - RestaurantQueue
              - Arn
# create step function
stepFunctions:
  stateMachines:
    WaitMachine:
      definition:
        Comment: "An example of the Amazon States Language using wait states"
        StartAt: FirstState
        States:
          FirstState:
            Type: Task
            Resource: !GetAtt account_api.Arn
              # Fn::GetAtt: 
              #   - hello
              #   - Arn
            Next: wait_using_seconds
          wait_using_seconds:
            Type: Wait
            Seconds: 10
            Next: FinalState
          FinalState:
            Type: Task
            Resource: 
              Fn::GetAtt: [account_api, Arn]
            End: true

